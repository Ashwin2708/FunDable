// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract CrowdFunding {
    //defining every entity that is going to be there if any entity is left will be added later.
    struct Campaign {
        address owner;
        string title;
        string description;
        uint256 target;
        uint deadline ;
        uint amountCollected;
        string image;
        address[] donators;
        uint256[] donations;

    }

    mapping(uint256 => Campaign) public campaigns;

    //keep track of the number of campaigns that in ongoing
    uint256 public numberOfCampaigns = 0;

    //functionalities of the program, like creating a campaign
    //first specify the constraints in a function and then get to its functionalities 
    function createCampaign(address _owner, string memory _title, string memory _description, uint256 _target, uint _deadline, string memory _image) public returns (uint256) {
        
        Campaign storage campaign = campaigns[numberOfCampaigns];

        //is everything okay??
        require(campaign.deadline < block.timestamp, "The Deadline should be a date in the future!");

        campaign.owner = _owner;
        campaign.title = _title;
        campaign.description = _description;
        campaign.target = _target;
        campaign.deadline = _deadline;
        campaign.amountCollected = 0;
        campaign.image = _image;

        numberOfCampaigns++;

        return numberOfCampaigns - 1;



    }

    //define parameters first
    function donateToCampaign(uint256 _id) public payable{
        uint amount = msg.value;

        Campaign storage campaign = campaigns[_id];

        campaign.donators.push(msg.sender);
        campaign.donations.push(amount);

        (bool sent, ) = payable(campaign.owner).call{value : amount}(" ");

        if(sent){
            campaign.amountCollected = campaign.amountCollected + amount;
        }

    }

    function getDonators(uint256 _id) view public returns (address[] memory, uint256[] memory) {
        return (campaigns[_id].donators, campaigns[_id].donations);
    }

    function getCampaigns() public view returns (Campaign[] memory) {
        Campaign[] memory allCampaigns = new Campaign[](numberOfCampaigns); 

        for(uint i = 0; i<numberOfCampaigns; i++){
            Campaign storage item = campaigns[i];

            allCampaigns[i] = item;
        }

        return allCampaigns;
    }
}